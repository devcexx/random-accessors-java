/*
 *  This file is part of random-accessors-java.
 *  random-accessors-java is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  random-accessors-java is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with random-accessors-java.  If not, see <http://www.gnu.org/licenses/>.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class me_devcexx_accessors_AccessorNatives */

#ifndef _Included_me_devcexx_accessors_AccessorNatives
#define _Included_me_devcexx_accessors_AccessorNatives
#ifdef __cplusplus
extern "C" {
#endif
#undef me_devcexx_accessors_AccessorNatives_CONSTANT_ID_IPC_CREAT
#define me_devcexx_accessors_AccessorNatives_CONSTANT_ID_IPC_CREAT 1L
#undef me_devcexx_accessors_AccessorNatives_CONSTANT_ID_IPC_RMID
#define me_devcexx_accessors_AccessorNatives_CONSTANT_ID_IPC_RMID 2L
#undef me_devcexx_accessors_AccessorNatives_CPYMEM_ERRNO_OK
#define me_devcexx_accessors_AccessorNatives_CPYMEM_ERRNO_OK 0L
#undef me_devcexx_accessors_AccessorNatives_CPYMEM_ERRNO_INVALID_DATASIZE
#define me_devcexx_accessors_AccessorNatives_CPYMEM_ERRNO_INVALID_DATASIZE 1L
/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    copyMemory
 * Signature: (Ljava/lang/Object;JJLjava/lang/Object;JJIJII)I
 */
JNIEXPORT jint JNICALL Java_me_devcexx_accessors_AccessorNatives_copyMemory
  (JNIEnv *, jclass, jobject, jlong, jlong, jobject, jlong, jlong, jint, jlong, jint, jint);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    native_ftok
 * Signature: (Ljava/lang/String;I)J
 */
JNIEXPORT jlong JNICALL Java_me_devcexx_accessors_AccessorNatives_native_1ftok
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    native_shmget
 * Signature: (JJI)I
 */
JNIEXPORT jint JNICALL Java_me_devcexx_accessors_AccessorNatives_native_1shmget
  (JNIEnv *, jclass, jlong, jlong, jint);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    native_shmat
 * Signature: (IJI)J
 */
JNIEXPORT jlong JNICALL Java_me_devcexx_accessors_AccessorNatives_native_1shmat
  (JNIEnv *, jclass, jint, jlong, jint);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    native_shmdt
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_me_devcexx_accessors_AccessorNatives_native_1shmdt
  (JNIEnv *, jclass, jlong);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    native_shmctl
 * Signature: (IIJ)I
 */
JNIEXPORT jint JNICALL Java_me_devcexx_accessors_AccessorNatives_native_1shmctl
  (JNIEnv *, jclass, jint, jint, jlong);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    errno
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_me_devcexx_accessors_AccessorNatives_errno
  (JNIEnv *, jclass);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    strerror
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_me_devcexx_accessors_AccessorNatives_strerror
  (JNIEnv *, jclass, jint);

/*
 * Class:     me_devcexx_accessors_AccessorNatives
 * Method:    constantValueOf
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_me_devcexx_accessors_AccessorNatives_constantValueOf
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
